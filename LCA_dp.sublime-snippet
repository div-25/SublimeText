<snippet>
	<content><![CDATA[
struct LCA {
    vi depth, euler, first, segtree;
    vector <bool> vis;
    int n;  //size of adjacency list == no of nodes in tree

    LCA(vector<vi>& adj, int root = 0) {
        n = adj.size();
        depth.resize(n);
        first.resize(n);
        euler.reserve(2*n);
        vis.assign(n, false);
        dfs(adj, root, 0);
        int m = euler.size();
        segtree.resize(4*m);
        build(1, 0, m-1);
    }

    void dfs(vector<vi>& adj, int node, int d = 0) {
        vis[node] = true;
        depth[node] = d;
        first[node] = euler.size();
        euler.pb(node);
        for (auto nbr: adj[node]) {
            if (!vis[nbr]) {
                dfs(adj, nbr, d + 1);
                euler.pb(node);
            }
        }
    }

    void build(int node, int b, int e) {
        if (b == e) {
            segtree[node] = euler[b];
        } else {
            int mid = (b + e)/2;
            build(node << 1, b, mid);
            build(node << 1 | 1, mid + 1, e);
            int lv = segtree[node << 1], rv = segtree[node << 1 | 1];
            segtree[node] = (depth[lv] < depth[rv]) ? lv : rv;
        }
    }

    int query(int node, int b, int e, int l, int r) {
        if (b > r || e < l)
            return -1;
        if (b >= l && e <= r)
            return segtree[node];
        int mid = (b + e)/2;
        int lv = query(node << 1, b, mid, l, r);
        int rv = query(node << 1 | 1, mid + 1, e, l, r);
        if (lv == -1) return rv;
        if (rv == -1) return lv;
        return depth[lv] < depth[rv] ? lv : rv;
    }

    int lca(int u, int v) {
        int l = first[u], r = first[v];
        if (l > r)
            swap(l, r);
        return query(1, 0, euler.size() - 1, l, r);
    }

    int dist(int u, int v) {
        return depth[u] + depth[v] - 2*depth[lca(u, v)];
    }
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LCA_DP</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
