<snippet>
    <content><![CDATA[
class SegmentTree {    // Replace ** with appropriate function
    int n;
    vi st, A, lazy;
    const ll INF = ll(1e18) + 42;
    ll combine(ll a, ll b) {    // **
        return a | b;
    }
    
    void build(int v, int L, int R) {
        if (L == R) st[v] = A[L];  // Storing the value
        else {
            int mid = (L + R) / 2;
            build(v << 1, L, mid);
            build((v << 1) + 1, mid + 1, R);
            st[v] = combine(st[v << 1], st[(v << 1) + 1]);
        }
    }

    void push(int v) {
        if (lazy[v] != 0) {
            st[v << 1] = lazy[v];
            lazy[v << 1] = lazy[v];
            st[(v << 1) + 1] = lazy[v];
            lazy[(v << 1) + 1] = lazy[v];
            lazy[v] = 0;
        }
    }

    ll query(int v, int L, int R, int i, int j) {
        if (i > R || j < L) return 0;    // ** -Identity element => INF for max; 0 for sum; INF for min
        if (i <= L && R <= j) return st[v];
        push(v);
        int mid = (L + R) / 2;
        return combine(query(v << 1, L, mid, i, j),
                query((v << 1) + 1, mid + 1, R, i, j));
    }

    void update(int v, int L, int R, int l, int r, ll val) {        
        if (l > r)
            return;
        if (l == L && R == r) {
            st[v] = val;
            lazy[v] = val;
        } else {
            push(v);
            int mid = (L + R) / 2;
            update(v << 1, L, mid, l, min(r, mid), val);
            update((v << 1) + 1, mid + 1, R, max(l, mid + 1), r, val);
            st[v] = combine(st[v << 1], st[(v << 1) + 1]);
        }
   }

public:
    SegmentTree(const vi& _A) {
        A = _A;
        n = A.size();
        st.assign(4 * n, 0);
        lazy.assign(4 * n, 0);
        build(1, 0, n - 1);
    }
    
    ll query(int i, int j) { return query(1, 0, n - 1, i, j); }

    void update(int l, int r, ll val) { return update(1, 0, n - 1, l, r, val); }
      
};

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>Segment_Tree_Lazy</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
