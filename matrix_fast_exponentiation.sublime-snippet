<snippet>
    <content><![CDATA[
struct Matrix {
    vector<vi> mat; // the contents of matrix as a 2D-vector
    int n_rows, n_cols; // number of rows and columns

    Matrix(vector<vi> values): mat(values), n_rows(values.size()), 
        n_cols(values[0].size()) {}

    static Matrix identity_matrix(int n) {
        // Return I_n - the identity matrix of size n.
        // This function is static, because it creates a new Matrix instance
        vector<vi> values(n, vi(n, 0));
        for (int i = 0; i < n; ++i)
            values[i][i] = 1;
        return values;
    }

    Matrix operator*(const Matrix &other) const {
        int n = n_rows, m = other.n_cols;
        vector<vi> result(n_rows, vi(m, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                for (int k = 0; k < n_cols; ++k) {
                    result[i][j] = (result[i][j] + mat[i][k] * 1ll
                                     * other.mat[k][j]) % MOD;
                }
            }
        }
        // Multiply matrices as usual, then return the result as the new Matrix
        return Matrix(result);
    }

    inline bool is_square() const {
        return n_rows == n_cols;
    }
};

Matrix fast_exponentiation(Matrix m, int power) {
    assert(m.is_square());
    Matrix result = Matrix::identity_matrix(m.n_rows);

    while(power) {
        if(power & 1)
            result = result * m;
        m = m * m;
        power >>= 1;
    }

    return result;
}

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>matrix_binary_exponentiation</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
